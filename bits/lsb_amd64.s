//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_lsb_avx2(SB), $0-24

	MOVQ data+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ result+16(FP), DX

	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // mov    qword [rdx], -1
	WORD $0x8948; BYTE $0xf1                   // mov    rcx, rsi
	LONG $0x20e9c148                           // shr    rcx, 32
	WORD $0xc031                               // xor    eax, eax
	WORD $0xf983; BYTE $0x01                   // cmp    ecx, 1
	JNE  LBB0_7
	WORD $0xfe83; BYTE $0x08                   // cmp    esi, 8
	JB   LBB0_7
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x03                   // shr    eax, 3
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	WORD $0x8948; BYTE $0xf9                   // mov    rcx, rdi

LBB0_3:
	LONG $0x096ffec5                           // vmovdqu    ymm1, yword [rcx]
	LONG $0x416ffec5; BYTE $0x20               // vmovdqu    ymm0, yword [rcx + 32]
	LONG $0xd1ebfdc5                           // vpor    ymm2, ymm0, ymm1
	LONG $0x177de2c4; BYTE $0xd2               // vptest    ymm2, ymm2
	JNE  LBB0_4
	LONG $0x00c08141; WORD $0xfffe; BYTE $0xff // add    r8d, -512
	LONG $0x40c18348                           // add    rcx, 64
	LONG $0xffc08348                           // add    rax, -1
	JNE  LBB0_3
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe083; BYTE $0xf8                   // and    eax, -8

LBB0_7:
	WORD $0xf039             // cmp    eax, esi
	JAE  LBB0_12
	WORD $0xc089             // mov    eax, eax
	WORD $0x8941; BYTE $0xf0 // mov    r8d, esi
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	LONG $0x06e1c148         // shl    rcx, 6

LBB0_9:
	LONG $0xc7348b48         // mov    rsi, qword [rdi + 8*rax]
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JNE  LBB0_10
	LONG $0x01c08348         // add    rax, 1
	LONG $0x40c18348         // add    rcx, 64
	WORD $0x3949; BYTE $0xc0 // cmp    r8, rax
	JNE  LBB0_9

LBB0_12:
	VZEROUPPER
	RET

LBB0_4:
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xca76f5c5         // vpcmpeqd    ymm1, ymm1, ymm2
	LONG $0xc150fcc5         // vmovmskps    eax, ymm1
	LONG $0xc276fdc5         // vpcmpeqd    ymm0, ymm0, ymm2
	LONG $0xf050fcc5         // vmovmskps    esi, ymm0
	WORD $0xe6c1; BYTE $0x08 // shl    esi, 8
	WORD $0xc609             // or    esi, eax
	WORD $0xd6f7             // not    esi
	WORD $0xbc0f; BYTE $0xc6 // bsf    eax, esi
	LONG $0x810cbc0f         // bsf    ecx, dword [rcx + 4*rax]
	WORD $0xe0c1; BYTE $0x05 // shl    eax, 5
	WORD $0x2944; BYTE $0xc0 // sub    eax, r8d
	WORD $0xc109             // or    ecx, eax
	WORD $0x8948; BYTE $0x0a // mov    qword [rdx], rcx
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

LBB0_10:
	LONG $0xc6bc0f48         // bsf    rax, rsi
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x8948; BYTE $0x0a // mov    qword [rdx], rcx
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret


