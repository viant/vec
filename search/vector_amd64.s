//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_magnitude_f32_avx2(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ size+8(FP), SI
	MOVQ output+16(FP), DX

	WORD $0x8948; BYTE $0xf1               // mov    rcx, rsi
	LONG $0x03e9c148                       // shr    rcx, 3
	WORD $0xc985                           // test    ecx, ecx
	JLE  LBB0_1
	QUAD $0x0007fffffff8b849; WORD $0x0000 // mov    r8, 34359738360
	LONG $0x06048d4a                       // lea    rax, [rsi + r8]
	WORD $0xf983; BYTE $0x04               // cmp    ecx, 4
	JAE  LBB0_15
	LONG $0xc057f8c5                       // vxorps    xmm0, xmm0, xmm0
	WORD $0x3145; BYTE $0xc9               // xor    r9d, r9d
	JMP  LBB0_4

LBB0_1:
	LONG $0xc057f8c5 // vxorps    xmm0, xmm0, xmm0
	WORD $0xc031     // xor    eax, eax
	JMP  LBB0_8

LBB0_15:
	WORD $0x8941; BYTE $0xca                   // mov    r10d, ecx
	LONG $0xfce28141; WORD $0xffff; BYTE $0x7f // and    r10d, 2147483644
	LONG $0xc957f0c5                           // vxorps    xmm1, xmm1, xmm1
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d

LBB0_16:
	LONG $0x107ca1c4; WORD $0x8f04             // vmovups    ymm0, yword [rdi + 4*r9]
	LONG $0x107ca1c4; WORD $0x8f54; BYTE $0x20 // vmovups    ymm2, yword [rdi + 4*r9 + 32]
	LONG $0x107ca1c4; WORD $0x8f5c; BYTE $0x40 // vmovups    ymm3, yword [rdi + 4*r9 + 64]
	LONG $0x107ca1c4; WORD $0x8f64; BYTE $0x60 // vmovups    ymm4, yword [rdi + 4*r9 + 96]
	LONG $0xa87de2c4; BYTE $0xc1               // vfmadd213ps    ymm0, ymm0, ymm1
	LONG $0xb86de2c4; BYTE $0xc2               // vfmadd231ps    ymm0, ymm2, ymm2
	LONG $0xb865e2c4; BYTE $0xc3               // vfmadd231ps    ymm0, ymm3, ymm3
	LONG $0xb85de2c4; BYTE $0xc4               // vfmadd231ps    ymm0, ymm4, ymm4
	LONG $0x20c18349                           // add    r9, 32
	LONG $0xc828fcc5                           // vmovaps    ymm1, ymm0
	LONG $0xfcc28341                           // add    r10d, -4
	JNE  LBB0_16

LBB0_4:
	WORD $0x214c; BYTE $0xc0 // and    rax, r8
	WORD $0xc1f6; BYTE $0x03 // test    cl, 3
	JE   LBB0_7
	LONG $0x8f048d4e         // lea    r8, [rdi + 4*r9]
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	WORD $0xe1c1; BYTE $0x05 // shl    ecx, 5
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB0_6:
	LONG $0x107c81c4; WORD $0x080c // vmovups    ymm1, yword [r8 + r9]
	LONG $0xb875e2c4; BYTE $0xc1   // vfmadd231ps    ymm0, ymm1, ymm1
	LONG $0x20c18349               // add    r9, 32
	WORD $0x3944; BYTE $0xc9       // cmp    ecx, r9d
	JNE  LBB0_6

LBB0_7:
	LONG $0x08c08348 // add    rax, 8

LBB0_8:
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc158f8c5               // vaddps    xmm0, xmm0, xmm1
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd    xmm1, xmm0, xmm0, 1
	LONG $0xc158f8c5               // vaddps    xmm0, xmm0, xmm1
	LONG $0xc816fac5               // vmovshdup    xmm1, xmm0
	LONG $0xc158fac5               // vaddss    xmm0, xmm0, xmm1
	WORD $0x8948; BYTE $0xf1       // mov    rcx, rsi
	WORD $0x2948; BYTE $0xc1       // sub    rcx, rax
	JBE  LBB0_14
	LONG $0x20f98348               // cmp    rcx, 32
	JB   LBB0_13
	WORD $0x8949; BYTE $0xc8       // mov    r8, rcx
	LONG $0xe0e08349               // and    r8, -32
	LONG $0xc957f0c5               // vxorps    xmm1, xmm1, xmm1
	LONG $0x0c71e3c4; WORD $0x01c0 // vblendps    xmm0, xmm1, xmm0, 1
	LONG $0x870c8d4c               // lea    r9, [rdi + 4*rax]
	LONG $0x60c18349               // add    r9, 96
	WORD $0x014c; BYTE $0xc0       // add    rax, r8
	LONG $0xc957f0c5               // vxorps    xmm1, xmm1, xmm1
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d
	LONG $0xd257e8c5               // vxorps    xmm2, xmm2, xmm2
	LONG $0xdb57e0c5               // vxorps    xmm3, xmm3, xmm3

LBB0_11:
	LONG $0x107c81c4; WORD $0x9164; BYTE $0xa0 // vmovups    ymm4, yword [r9 + 4*r10 - 96]
	LONG $0x107c81c4; WORD $0x916c; BYTE $0xc0 // vmovups    ymm5, yword [r9 + 4*r10 - 64]
	LONG $0x107c81c4; WORD $0x9174; BYTE $0xe0 // vmovups    ymm6, yword [r9 + 4*r10 - 32]
	LONG $0x107c81c4; WORD $0x913c             // vmovups    ymm7, yword [r9 + 4*r10]
	LONG $0xb85de2c4; BYTE $0xc4               // vfmadd231ps    ymm0, ymm4, ymm4
	LONG $0xb855e2c4; BYTE $0xcd               // vfmadd231ps    ymm1, ymm5, ymm5
	LONG $0xb84de2c4; BYTE $0xd6               // vfmadd231ps    ymm2, ymm6, ymm6
	LONG $0xb845e2c4; BYTE $0xdf               // vfmadd231ps    ymm3, ymm7, ymm7
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB0_11
	LONG $0xc058f4c5                           // vaddps    ymm0, ymm1, ymm0
	LONG $0xca58e4c5                           // vaddps    ymm1, ymm3, ymm2
	LONG $0xc058f4c5                           // vaddps    ymm0, ymm1, ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128    xmm1, ymm0, 1
	LONG $0xc158f8c5                           // vaddps    xmm0, xmm0, xmm1
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd    xmm1, xmm0, xmm0, 1
	LONG $0xc158f8c5                           // vaddps    xmm0, xmm0, xmm1
	LONG $0xc816fac5                           // vmovshdup    xmm1, xmm0
	LONG $0xc158fac5                           // vaddss    xmm0, xmm0, xmm1
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JE   LBB0_14

LBB0_13:
	LONG $0x0c10fac5; BYTE $0x87 // vmovss    xmm1, dword [rdi + 4*rax]
	LONG $0xb971e2c4; BYTE $0xc1 // vfmadd231ss    xmm0, xmm1, xmm1
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0x3948; BYTE $0xc6     // cmp    rsi, rax
	JNE  LBB0_13

LBB0_14:
	LONG $0xc051fac5 // vsqrtss    xmm0, xmm0, xmm0
	LONG $0x0211fac5 // vmovss    dword [rdx], xmm0
	VZEROUPPER
	RET
