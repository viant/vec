//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x3f000000c0400000
DATA LCDATA1<>+0x008(SB)/8, $0x000000003f800000
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_cosine_distance_f32_avx2(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ size+16(FP), DX
	MOVQ output+24(FP), CX
	LEAQ LCDATA1<>(SB), BP

	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	LONG $0xc957f0c5         // vxorps    xmm1, xmm1, xmm1
	LONG $0xd257e8c5         // vxorps    xmm2, xmm2, xmm2
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_8
	LONG $0x10fa8348         // cmp    rdx, 16
	JAE  LBB0_4
	WORD $0xc031             // xor    eax, eax
	LONG $0xdb57e0c5         // vxorps    xmm3, xmm3, xmm3
	JMP  LBB0_3

LBB0_4:
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0xf0e08348         // and    rax, -16
	LONG $0xc957f0c5         // vxorps    xmm1, xmm1, xmm1
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	LONG $0xf657c8c5         // vxorps    xmm6, xmm6, xmm6
	LONG $0xd257e8c5         // vxorps    xmm2, xmm2, xmm2
	LONG $0xed57d0c5         // vxorps    xmm5, xmm5, xmm5
	LONG $0xdb57e0c5         // vxorps    xmm3, xmm3, xmm3
	LONG $0xe457d8c5         // vxorps    xmm4, xmm4, xmm4

LBB0_5:
	LONG $0x107ca1c4; WORD $0x873c             // vmovups    ymm7, yword [rdi + 4*r8]
	LONG $0x107c21c4; WORD $0x8744; BYTE $0x20 // vmovups    ymm8, yword [rdi + 4*r8 + 32]
	LONG $0x107c21c4; WORD $0x860c             // vmovups    ymm9, yword [rsi + 4*r8]
	LONG $0x107c21c4; WORD $0x8654; BYTE $0x20 // vmovups    ymm10, yword [rsi + 4*r8 + 32]
	LONG $0xb835e2c4; BYTE $0xcf               // vfmadd231ps    ymm1, ymm9, ymm7
	LONG $0xb82dc2c4; BYTE $0xf0               // vfmadd231ps    ymm6, ymm10, ymm8
	LONG $0xb845e2c4; BYTE $0xd7               // vfmadd231ps    ymm2, ymm7, ymm7
	LONG $0xb83dc2c4; BYTE $0xe8               // vfmadd231ps    ymm5, ymm8, ymm8
	LONG $0xb835c2c4; BYTE $0xd9               // vfmadd231ps    ymm3, ymm9, ymm9
	LONG $0xb82dc2c4; BYTE $0xe2               // vfmadd231ps    ymm4, ymm10, ymm10
	LONG $0x10c08349                           // add    r8, 16
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JNE  LBB0_5
	LONG $0xc958ccc5                           // vaddps    ymm1, ymm6, ymm1
	LONG $0x197de3c4; WORD $0x01ce             // vextractf128    xmm6, ymm1, 1
	LONG $0xce58f0c5                           // vaddps    xmm1, xmm1, xmm6
	LONG $0xf1c6f1c5; BYTE $0x01               // vshufpd    xmm6, xmm1, xmm1, 1
	LONG $0xce58f0c5                           // vaddps    xmm1, xmm1, xmm6
	LONG $0xf116fac5                           // vmovshdup    xmm6, xmm1
	LONG $0xce58f2c5                           // vaddss    xmm1, xmm1, xmm6
	LONG $0xd258d4c5                           // vaddps    ymm2, ymm5, ymm2
	LONG $0x197de3c4; WORD $0x01d5             // vextractf128    xmm5, ymm2, 1
	LONG $0xd558e8c5                           // vaddps    xmm2, xmm2, xmm5
	LONG $0xeac6e9c5; BYTE $0x01               // vshufpd    xmm5, xmm2, xmm2, 1
	LONG $0xd558e8c5                           // vaddps    xmm2, xmm2, xmm5
	LONG $0xea16fac5                           // vmovshdup    xmm5, xmm2
	LONG $0xd558eac5                           // vaddss    xmm2, xmm2, xmm5
	LONG $0xdb58dcc5                           // vaddps    ymm3, ymm4, ymm3
	LONG $0x197de3c4; WORD $0x01dc             // vextractf128    xmm4, ymm3, 1
	LONG $0xdc58e0c5                           // vaddps    xmm3, xmm3, xmm4
	LONG $0xe3c6e1c5; BYTE $0x01               // vshufpd    xmm4, xmm3, xmm3, 1
	LONG $0xdc58e0c5                           // vaddps    xmm3, xmm3, xmm4
	LONG $0xe316fac5                           // vmovshdup    xmm4, xmm3
	LONG $0xdc58e2c5                           // vaddss    xmm3, xmm3, xmm4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JE   LBB0_7

LBB0_3:
	LONG $0x2410fac5; BYTE $0x87 // vmovss    xmm4, dword [rdi + 4*rax]
	LONG $0x2c10fac5; BYTE $0x86 // vmovss    xmm5, dword [rsi + 4*rax]
	LONG $0xb951e2c4; BYTE $0xcc // vfmadd231ss    xmm1, xmm5, xmm4
	LONG $0xb959e2c4; BYTE $0xd4 // vfmadd231ss    xmm2, xmm4, xmm4
	LONG $0xb951e2c4; BYTE $0xdd // vfmadd231ss    xmm3, xmm5, xmm5
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JNE  LBB0_3

LBB0_7:
	LONG $0xd359eac5 // vmulss    xmm2, xmm2, xmm3

LBB0_8:
	LONG $0xda52eac5               // vrsqrtss    xmm3, xmm2, xmm2
	LONG $0xd359eac5               // vmulss    xmm2, xmm2, xmm3
	LONG $0xa961e2c4; WORD $0x0055 // vfmadd213ss    xmm2, xmm3, dword 0[rbp] /* [rip + LCPI0_0] */
	LONG $0x5d59e2c5; BYTE $0x04   // vmulss    xmm3, xmm3, dword 4[rbp] /* [rip + LCPI0_1] */
	LONG $0xd259e2c5               // vmulss    xmm2, xmm3, xmm2
	LONG $0xa971e2c4; WORD $0x0855 // vfmadd213ss    xmm2, xmm1, dword 8[rbp] /* [rip + LCPI0_2] */
	LONG $0xc0c2f2c5; BYTE $0x04   // vcmpneqss    xmm0, xmm1, xmm0
	LONG $0x1879e2c4; WORD $0x084d // vbroadcastss    xmm1, dword 8[rbp] /* [rip + LCPI0_2] */
	LONG $0x4a71e3c4; WORD $0x00c2 // vblendvps    xmm0, xmm1, xmm2, xmm0
	LONG $0x0111fac5               // vmovss    dword [rcx], xmm0
	VZEROUPPER
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x000000003f800000
GLOBL LCDATA2<>(SB), 8, $8

TEXT ·_cosine_distance_with_magnitudes_f32_avx2(SB), $0-40

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ magnitudes+16(FP), DX
	MOVQ size+24(FP), CX
	MOVQ output+32(FP), R8
	LEAQ LCDATA2<>(SB), BP

	LONG $0x0a10fac5         // vmovss    xmm1, dword [rdx]
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	LONG $0xd257e8c5         // vxorps    xmm2, xmm2, xmm2
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_7
	LONG $0x20f98348         // cmp    rcx, 32
	JAE  LBB1_4
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_3

LBB1_4:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	LONG $0xe0e08348         // and    rax, -32
	LONG $0xd257e8c5         // vxorps    xmm2, xmm2, xmm2
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	LONG $0xdb57e0c5         // vxorps    xmm3, xmm3, xmm3
	LONG $0xe457d8c5         // vxorps    xmm4, xmm4, xmm4
	LONG $0xed57d0c5         // vxorps    xmm5, xmm5, xmm5

LBB1_5:
	LONG $0x107ca1c4; WORD $0x8e34             // vmovups    ymm6, yword [rsi + 4*r9]
	LONG $0x107ca1c4; WORD $0x8e7c; BYTE $0x20 // vmovups    ymm7, yword [rsi + 4*r9 + 32]
	LONG $0x107c21c4; WORD $0x8e44; BYTE $0x40 // vmovups    ymm8, yword [rsi + 4*r9 + 64]
	LONG $0x107c21c4; WORD $0x8e4c; BYTE $0x60 // vmovups    ymm9, yword [rsi + 4*r9 + 96]
	LONG $0xb84da2c4; WORD $0x8f14             // vfmadd231ps    ymm2, ymm6, yword [rdi + 4*r9]
	LONG $0xb845a2c4; WORD $0x8f5c; BYTE $0x20 // vfmadd231ps    ymm3, ymm7, yword [rdi + 4*r9 + 32]
	LONG $0xb83da2c4; WORD $0x8f64; BYTE $0x40 // vfmadd231ps    ymm4, ymm8, yword [rdi + 4*r9 + 64]
	LONG $0xb835a2c4; WORD $0x8f6c; BYTE $0x60 // vfmadd231ps    ymm5, ymm9, yword [rdi + 4*r9 + 96]
	LONG $0x20c18349                           // add    r9, 32
	WORD $0x394c; BYTE $0xc8                   // cmp    rax, r9
	JNE  LBB1_5
	LONG $0xd258e4c5                           // vaddps    ymm2, ymm3, ymm2
	LONG $0xdc58d4c5                           // vaddps    ymm3, ymm5, ymm4
	LONG $0xd258e4c5                           // vaddps    ymm2, ymm3, ymm2
	LONG $0x197de3c4; WORD $0x01d3             // vextractf128    xmm3, ymm2, 1
	LONG $0xd358e8c5                           // vaddps    xmm2, xmm2, xmm3
	LONG $0xdac6e9c5; BYTE $0x01               // vshufpd    xmm3, xmm2, xmm2, 1
	LONG $0xd358e8c5                           // vaddps    xmm2, xmm2, xmm3
	LONG $0xda16fac5                           // vmovshdup    xmm3, xmm2
	LONG $0xd358eac5                           // vaddss    xmm2, xmm2, xmm3
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JE   LBB1_7

LBB1_3:
	LONG $0x1c10fac5; BYTE $0x86   // vmovss    xmm3, dword [rsi + 4*rax]
	LONG $0xb961e2c4; WORD $0x8714 // vfmadd231ss    xmm2, xmm3, dword [rdi + 4*rax]
	WORD $0xff48; BYTE $0xc0       // inc    rax
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB1_3

LBB1_7:
	LONG $0xd8c2f0c5; BYTE $0x04   // vcmpneqps    xmm3, xmm1, xmm0
	LONG $0xe0c2e8c5; BYTE $0x04   // vcmpneqps    xmm4, xmm2, xmm0
	LONG $0xdb54d8c5               // vandps    xmm3, xmm4, xmm3
	LONG $0xd87ef9c5               // vmovd    eax, xmm3
	LONG $0x5d10fac5; BYTE $0x00   // vmovss    xmm3, dword 0[rbp] /* [rip + LCPI1_0] */
	WORD $0x01a8                   // test    al, 1
	JE   LBB1_9
	LONG $0x6210fac5; BYTE $0x04   // vmovss    xmm4, dword [rdx + 4]
	LONG $0xc959dac5               // vmulss    xmm1, xmm4, xmm1
	LONG $0xc95eeac5               // vdivss    xmm1, xmm2, xmm1
	LONG $0xc95ce2c5               // vsubss    xmm1, xmm3, xmm1
	LONG $0xc0c2dac5; BYTE $0x04   // vcmpneqss    xmm0, xmm4, xmm0
	LONG $0x1879e2c4; WORD $0x0055 // vbroadcastss    xmm2, dword 0[rbp] /* [rip + LCPI1_0] */
	LONG $0x4a69e3c4; WORD $0x00d9 // vblendvps    xmm3, xmm2, xmm1, xmm0

LBB1_9:
	LONG $0x117ac1c4; BYTE $0x18 // vmovss    dword [r8], xmm3
	VZEROUPPER
	RET
